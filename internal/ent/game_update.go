// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BerlitzPlatina/gf-uma/internal/ent/category"
	"github.com/BerlitzPlatina/gf-uma/internal/ent/game"
	"github.com/BerlitzPlatina/gf-uma/internal/ent/predicate"
)

// GameUpdate is the builder for updating Game entities.
type GameUpdate struct {
	config
	hooks    []Hook
	mutation *GameMutation
}

// Where appends a list predicates to the GameUpdate builder.
func (gu *GameUpdate) Where(ps ...predicate.Game) *GameUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetName sets the "name" field.
func (gu *GameUpdate) SetName(s string) *GameUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetIcon sets the "icon" field.
func (gu *GameUpdate) SetIcon(s string) *GameUpdate {
	gu.mutation.SetIcon(s)
	return gu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (gu *GameUpdate) SetNillableIcon(s *string) *GameUpdate {
	if s != nil {
		gu.SetIcon(*s)
	}
	return gu
}

// ClearIcon clears the value of the "icon" field.
func (gu *GameUpdate) ClearIcon() *GameUpdate {
	gu.mutation.ClearIcon()
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GameUpdate) SetUpdatedAt(t time.Time) *GameUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetDeletedAt sets the "deleted_at" field.
func (gu *GameUpdate) SetDeletedAt(t time.Time) *GameUpdate {
	gu.mutation.SetDeletedAt(t)
	return gu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gu *GameUpdate) ClearDeletedAt() *GameUpdate {
	gu.mutation.ClearDeletedAt()
	return gu
}

// AddGameCategoryIDs adds the "game_category" edge to the Category entity by IDs.
func (gu *GameUpdate) AddGameCategoryIDs(ids ...int) *GameUpdate {
	gu.mutation.AddGameCategoryIDs(ids...)
	return gu
}

// AddGameCategory adds the "game_category" edges to the Category entity.
func (gu *GameUpdate) AddGameCategory(c ...*Category) *GameUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gu.AddGameCategoryIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (gu *GameUpdate) Mutation() *GameMutation {
	return gu.mutation
}

// ClearGameCategory clears all "game_category" edges to the Category entity.
func (gu *GameUpdate) ClearGameCategory() *GameUpdate {
	gu.mutation.ClearGameCategory()
	return gu
}

// RemoveGameCategoryIDs removes the "game_category" edge to Category entities by IDs.
func (gu *GameUpdate) RemoveGameCategoryIDs(ids ...int) *GameUpdate {
	gu.mutation.RemoveGameCategoryIDs(ids...)
	return gu
}

// RemoveGameCategory removes "game_category" edges to Category entities.
func (gu *GameUpdate) RemoveGameCategory(c ...*Category) *GameUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gu.RemoveGameCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GameUpdate) Save(ctx context.Context) (int, error) {
	gu.defaults()
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GameUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GameUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GameUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GameUpdate) defaults() {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		v := game.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
	if _, ok := gu.mutation.DeletedAt(); !ok && !gu.mutation.DeletedAtCleared() {
		v := game.UpdateDefaultDeletedAt()
		gu.mutation.SetDeletedAt(v)
	}
}

func (gu *GameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(game.Table, game.Columns, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(game.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.Icon(); ok {
		_spec.SetField(game.FieldIcon, field.TypeString, value)
	}
	if gu.mutation.IconCleared() {
		_spec.ClearField(game.FieldIcon, field.TypeString)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(game.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.DeletedAt(); ok {
		_spec.SetField(game.FieldDeletedAt, field.TypeTime, value)
	}
	if gu.mutation.DeletedAtCleared() {
		_spec.ClearField(game.FieldDeletedAt, field.TypeTime)
	}
	if gu.mutation.GameCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameCategoryTable,
			Columns: []string{game.GameCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedGameCategoryIDs(); len(nodes) > 0 && !gu.mutation.GameCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameCategoryTable,
			Columns: []string{game.GameCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GameCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameCategoryTable,
			Columns: []string{game.GameCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GameUpdateOne is the builder for updating a single Game entity.
type GameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameMutation
}

// SetName sets the "name" field.
func (guo *GameUpdateOne) SetName(s string) *GameUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetIcon sets the "icon" field.
func (guo *GameUpdateOne) SetIcon(s string) *GameUpdateOne {
	guo.mutation.SetIcon(s)
	return guo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableIcon(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetIcon(*s)
	}
	return guo
}

// ClearIcon clears the value of the "icon" field.
func (guo *GameUpdateOne) ClearIcon() *GameUpdateOne {
	guo.mutation.ClearIcon()
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GameUpdateOne) SetUpdatedAt(t time.Time) *GameUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetDeletedAt sets the "deleted_at" field.
func (guo *GameUpdateOne) SetDeletedAt(t time.Time) *GameUpdateOne {
	guo.mutation.SetDeletedAt(t)
	return guo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (guo *GameUpdateOne) ClearDeletedAt() *GameUpdateOne {
	guo.mutation.ClearDeletedAt()
	return guo
}

// AddGameCategoryIDs adds the "game_category" edge to the Category entity by IDs.
func (guo *GameUpdateOne) AddGameCategoryIDs(ids ...int) *GameUpdateOne {
	guo.mutation.AddGameCategoryIDs(ids...)
	return guo
}

// AddGameCategory adds the "game_category" edges to the Category entity.
func (guo *GameUpdateOne) AddGameCategory(c ...*Category) *GameUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return guo.AddGameCategoryIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (guo *GameUpdateOne) Mutation() *GameMutation {
	return guo.mutation
}

// ClearGameCategory clears all "game_category" edges to the Category entity.
func (guo *GameUpdateOne) ClearGameCategory() *GameUpdateOne {
	guo.mutation.ClearGameCategory()
	return guo
}

// RemoveGameCategoryIDs removes the "game_category" edge to Category entities by IDs.
func (guo *GameUpdateOne) RemoveGameCategoryIDs(ids ...int) *GameUpdateOne {
	guo.mutation.RemoveGameCategoryIDs(ids...)
	return guo
}

// RemoveGameCategory removes "game_category" edges to Category entities.
func (guo *GameUpdateOne) RemoveGameCategory(c ...*Category) *GameUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return guo.RemoveGameCategoryIDs(ids...)
}

// Where appends a list predicates to the GameUpdate builder.
func (guo *GameUpdateOne) Where(ps ...predicate.Game) *GameUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GameUpdateOne) Select(field string, fields ...string) *GameUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Game entity.
func (guo *GameUpdateOne) Save(ctx context.Context) (*Game, error) {
	guo.defaults()
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GameUpdateOne) SaveX(ctx context.Context) *Game {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GameUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GameUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GameUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		v := game.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
	if _, ok := guo.mutation.DeletedAt(); !ok && !guo.mutation.DeletedAtCleared() {
		v := game.UpdateDefaultDeletedAt()
		guo.mutation.SetDeletedAt(v)
	}
}

func (guo *GameUpdateOne) sqlSave(ctx context.Context) (_node *Game, err error) {
	_spec := sqlgraph.NewUpdateSpec(game.Table, game.Columns, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Game.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, game.FieldID)
		for _, f := range fields {
			if !game.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != game.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(game.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.Icon(); ok {
		_spec.SetField(game.FieldIcon, field.TypeString, value)
	}
	if guo.mutation.IconCleared() {
		_spec.ClearField(game.FieldIcon, field.TypeString)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(game.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.DeletedAt(); ok {
		_spec.SetField(game.FieldDeletedAt, field.TypeTime, value)
	}
	if guo.mutation.DeletedAtCleared() {
		_spec.ClearField(game.FieldDeletedAt, field.TypeTime)
	}
	if guo.mutation.GameCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameCategoryTable,
			Columns: []string{game.GameCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedGameCategoryIDs(); len(nodes) > 0 && !guo.mutation.GameCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameCategoryTable,
			Columns: []string{game.GameCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GameCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameCategoryTable,
			Columns: []string{game.GameCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Game{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
